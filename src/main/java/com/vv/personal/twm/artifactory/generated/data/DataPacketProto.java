// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataPacket.proto

package com.vv.personal.twm.artifactory.generated.data;

public final class DataPacketProto {
  private DataPacketProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface DataPacketOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DataPacket)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    int getIntDoubleMapCount();
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    boolean containsIntDoubleMap(
        int key);
    /**
     * Use {@link #getIntDoubleMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Double>
    getIntDoubleMap();
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Double>
    getIntDoubleMapMap();
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    double getIntDoubleMapOrDefault(
        int key,
        double defaultValue);
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    double getIntDoubleMapOrThrow(
        int key);

    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    int getIntIntMapCount();
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    boolean containsIntIntMap(
        int key);
    /**
     * Use {@link #getIntIntMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getIntIntMap();
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    java.util.Map<java.lang.Integer, java.lang.Integer>
    getIntIntMapMap();
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    int getIntIntMapOrDefault(
        int key,
        int defaultValue);
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    int getIntIntMapOrThrow(
        int key);

    /**
     * <code>repeated int32 ints = 3;</code>
     * @return A list containing the ints.
     */
    java.util.List<java.lang.Integer> getIntsList();
    /**
     * <code>repeated int32 ints = 3;</code>
     * @return The count of ints.
     */
    int getIntsCount();
    /**
     * <code>repeated int32 ints = 3;</code>
     * @param index The index of the element to return.
     * @return The ints at the given index.
     */
    int getInts(int index);

    /**
     * <code>repeated int64 longs = 4;</code>
     * @return A list containing the longs.
     */
    java.util.List<java.lang.Long> getLongsList();
    /**
     * <code>repeated int64 longs = 4;</code>
     * @return The count of longs.
     */
    int getLongsCount();
    /**
     * <code>repeated int64 longs = 4;</code>
     * @param index The index of the element to return.
     * @return The longs at the given index.
     */
    long getLongs(int index);

    /**
     * <code>repeated double doubles = 5;</code>
     * @return A list containing the doubles.
     */
    java.util.List<java.lang.Double> getDoublesList();
    /**
     * <code>repeated double doubles = 5;</code>
     * @return The count of doubles.
     */
    int getDoublesCount();
    /**
     * <code>repeated double doubles = 5;</code>
     * @param index The index of the element to return.
     * @return The doubles at the given index.
     */
    double getDoubles(int index);

    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    int getStringStringMapCount();
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    boolean containsStringStringMap(
        java.lang.String key);
    /**
     * Use {@link #getStringStringMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getStringStringMap();
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getStringStringMapMap();
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    /* nullable */
java.lang.String getStringStringMapOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    java.lang.String getStringStringMapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    int getStringDoubleMapCount();
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    boolean containsStringDoubleMap(
        java.lang.String key);
    /**
     * Use {@link #getStringDoubleMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Double>
    getStringDoubleMap();
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    java.util.Map<java.lang.String, java.lang.Double>
    getStringDoubleMapMap();
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    double getStringDoubleMapOrDefault(
        java.lang.String key,
        double defaultValue);
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    double getStringDoubleMapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    int getStringIntMapCount();
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    boolean containsStringIntMap(
        java.lang.String key);
    /**
     * Use {@link #getStringIntMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Integer>
    getStringIntMap();
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    java.util.Map<java.lang.String, java.lang.Integer>
    getStringIntMapMap();
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    int getStringIntMapOrDefault(
        java.lang.String key,
        int defaultValue);
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    int getStringIntMapOrThrow(
        java.lang.String key);

    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    int getStringLongMapCount();
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    boolean containsStringLongMap(
        java.lang.String key);
    /**
     * Use {@link #getStringLongMapMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Long>
    getStringLongMap();
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    java.util.Map<java.lang.String, java.lang.Long>
    getStringLongMapMap();
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    long getStringLongMapOrDefault(
        java.lang.String key,
        long defaultValue);
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    long getStringLongMapOrThrow(
        java.lang.String key);

    /**
     * <code>repeated string strings = 10;</code>
     * @return A list containing the strings.
     */
    java.util.List<java.lang.String>
        getStringsList();
    /**
     * <code>repeated string strings = 10;</code>
     * @return The count of strings.
     */
    int getStringsCount();
    /**
     * <code>repeated string strings = 10;</code>
     * @param index The index of the element to return.
     * @return The strings at the given index.
     */
    java.lang.String getStrings(int index);
    /**
     * <code>repeated string strings = 10;</code>
     * @param index The index of the value to return.
     * @return The bytes of the strings at the given index.
     */
    com.google.protobuf.ByteString
        getStringsBytes(int index);
  }
  /**
   * Protobuf type {@code DataPacket}
   */
  public static final class DataPacket extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DataPacket)
      DataPacketOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DataPacket.newBuilder() to construct.
    private DataPacket(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DataPacket() {
      ints_ = emptyIntList();
      longs_ = emptyLongList();
      doubles_ = emptyDoubleList();
      strings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DataPacket();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetIntDoubleMap();
        case 2:
          return internalGetIntIntMap();
        case 6:
          return internalGetStringStringMap();
        case 7:
          return internalGetStringDoubleMap();
        case 8:
          return internalGetStringIntMap();
        case 9:
          return internalGetStringLongMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket.class, com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket.Builder.class);
    }

    public static final int INTDOUBLEMAP_FIELD_NUMBER = 1;
    private static final class IntDoubleMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, java.lang.Double>newDefaultInstance(
                  com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_IntDoubleMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.Double> intDoubleMap_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Double>
    internalGetIntDoubleMap() {
      if (intDoubleMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            IntDoubleMapDefaultEntryHolder.defaultEntry);
      }
      return intDoubleMap_;
    }
    public int getIntDoubleMapCount() {
      return internalGetIntDoubleMap().getMap().size();
    }
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    @java.lang.Override
    public boolean containsIntDoubleMap(
        int key) {
      
      return internalGetIntDoubleMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getIntDoubleMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Double> getIntDoubleMap() {
      return getIntDoubleMapMap();
    }
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, java.lang.Double> getIntDoubleMapMap() {
      return internalGetIntDoubleMap().getMap();
    }
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    @java.lang.Override
    public double getIntDoubleMapOrDefault(
        int key,
        double defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetIntDoubleMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
     */
    @java.lang.Override
    public double getIntDoubleMapOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Double> map =
          internalGetIntDoubleMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int INTINTMAP_FIELD_NUMBER = 2;
    private static final class IntIntMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.Integer, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.Integer, java.lang.Integer>newDefaultInstance(
                  com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_IntIntMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0,
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.Integer, java.lang.Integer> intIntMap_;
    private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
    internalGetIntIntMap() {
      if (intIntMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            IntIntMapDefaultEntryHolder.defaultEntry);
      }
      return intIntMap_;
    }
    public int getIntIntMapCount() {
      return internalGetIntIntMap().getMap().size();
    }
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    @java.lang.Override
    public boolean containsIntIntMap(
        int key) {
      
      return internalGetIntIntMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getIntIntMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.Integer, java.lang.Integer> getIntIntMap() {
      return getIntIntMapMap();
    }
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.Integer, java.lang.Integer> getIntIntMapMap() {
      return internalGetIntIntMap().getMap();
    }
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    @java.lang.Override
    public int getIntIntMapOrDefault(
        int key,
        int defaultValue) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetIntIntMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
     */
    @java.lang.Override
    public int getIntIntMapOrThrow(
        int key) {
      
      java.util.Map<java.lang.Integer, java.lang.Integer> map =
          internalGetIntIntMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int INTS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList ints_;
    /**
     * <code>repeated int32 ints = 3;</code>
     * @return A list containing the ints.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getIntsList() {
      return ints_;
    }
    /**
     * <code>repeated int32 ints = 3;</code>
     * @return The count of ints.
     */
    public int getIntsCount() {
      return ints_.size();
    }
    /**
     * <code>repeated int32 ints = 3;</code>
     * @param index The index of the element to return.
     * @return The ints at the given index.
     */
    public int getInts(int index) {
      return ints_.getInt(index);
    }
    private int intsMemoizedSerializedSize = -1;

    public static final int LONGS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.LongList longs_;
    /**
     * <code>repeated int64 longs = 4;</code>
     * @return A list containing the longs.
     */
    @java.lang.Override
    public java.util.List<java.lang.Long>
        getLongsList() {
      return longs_;
    }
    /**
     * <code>repeated int64 longs = 4;</code>
     * @return The count of longs.
     */
    public int getLongsCount() {
      return longs_.size();
    }
    /**
     * <code>repeated int64 longs = 4;</code>
     * @param index The index of the element to return.
     * @return The longs at the given index.
     */
    public long getLongs(int index) {
      return longs_.getLong(index);
    }
    private int longsMemoizedSerializedSize = -1;

    public static final int DOUBLES_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.DoubleList doubles_;
    /**
     * <code>repeated double doubles = 5;</code>
     * @return A list containing the doubles.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getDoublesList() {
      return doubles_;
    }
    /**
     * <code>repeated double doubles = 5;</code>
     * @return The count of doubles.
     */
    public int getDoublesCount() {
      return doubles_.size();
    }
    /**
     * <code>repeated double doubles = 5;</code>
     * @param index The index of the element to return.
     * @return The doubles at the given index.
     */
    public double getDoubles(int index) {
      return doubles_.getDouble(index);
    }
    private int doublesMemoizedSerializedSize = -1;

    public static final int STRINGSTRINGMAP_FIELD_NUMBER = 6;
    private static final class StringStringMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_StringStringMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> stringStringMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetStringStringMap() {
      if (stringStringMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StringStringMapDefaultEntryHolder.defaultEntry);
      }
      return stringStringMap_;
    }
    public int getStringStringMapCount() {
      return internalGetStringStringMap().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    @java.lang.Override
    public boolean containsStringStringMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetStringStringMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStringStringMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getStringStringMap() {
      return getStringStringMapMap();
    }
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getStringStringMapMap() {
      return internalGetStringStringMap().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getStringStringMapOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringStringMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
     */
    @java.lang.Override
    public java.lang.String getStringStringMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringStringMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STRINGDOUBLEMAP_FIELD_NUMBER = 7;
    private static final class StringDoubleMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Double>newDefaultInstance(
                  com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_StringDoubleMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Double> stringDoubleMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
    internalGetStringDoubleMap() {
      if (stringDoubleMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StringDoubleMapDefaultEntryHolder.defaultEntry);
      }
      return stringDoubleMap_;
    }
    public int getStringDoubleMapCount() {
      return internalGetStringDoubleMap().getMap().size();
    }
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    @java.lang.Override
    public boolean containsStringDoubleMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetStringDoubleMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStringDoubleMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double> getStringDoubleMap() {
      return getStringDoubleMapMap();
    }
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Double> getStringDoubleMapMap() {
      return internalGetStringDoubleMap().getMap();
    }
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    @java.lang.Override
    public double getStringDoubleMapOrDefault(
        java.lang.String key,
        double defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetStringDoubleMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
     */
    @java.lang.Override
    public double getStringDoubleMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetStringDoubleMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STRINGINTMAP_FIELD_NUMBER = 8;
    private static final class StringIntMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Integer> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Integer>newDefaultInstance(
                  com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_StringIntMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT32,
                  0);
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> stringIntMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetStringIntMap() {
      if (stringIntMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StringIntMapDefaultEntryHolder.defaultEntry);
      }
      return stringIntMap_;
    }
    public int getStringIntMapCount() {
      return internalGetStringIntMap().getMap().size();
    }
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    @java.lang.Override
    public boolean containsStringIntMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetStringIntMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStringIntMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Integer> getStringIntMap() {
      return getStringIntMapMap();
    }
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Integer> getStringIntMapMap() {
      return internalGetStringIntMap().getMap();
    }
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    @java.lang.Override
    public int getStringIntMapOrDefault(
        java.lang.String key,
        int defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetStringIntMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
     */
    @java.lang.Override
    public int getStringIntMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Integer> map =
          internalGetStringIntMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STRINGLONGMAP_FIELD_NUMBER = 9;
    private static final class StringLongMapDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.Long> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.Long>newDefaultInstance(
                  com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_StringLongMapEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.INT64,
                  0L);
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Long> stringLongMap_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
    internalGetStringLongMap() {
      if (stringLongMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            StringLongMapDefaultEntryHolder.defaultEntry);
      }
      return stringLongMap_;
    }
    public int getStringLongMapCount() {
      return internalGetStringLongMap().getMap().size();
    }
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    @java.lang.Override
    public boolean containsStringLongMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetStringLongMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getStringLongMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Long> getStringLongMap() {
      return getStringLongMapMap();
    }
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.Long> getStringLongMapMap() {
      return internalGetStringLongMap().getMap();
    }
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    @java.lang.Override
    public long getStringLongMapOrDefault(
        java.lang.String key,
        long defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetStringLongMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
     */
    @java.lang.Override
    public long getStringLongMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.Long> map =
          internalGetStringLongMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int STRINGS_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringList strings_;
    /**
     * <code>repeated string strings = 10;</code>
     * @return A list containing the strings.
     */
    public com.google.protobuf.ProtocolStringList
        getStringsList() {
      return strings_;
    }
    /**
     * <code>repeated string strings = 10;</code>
     * @return The count of strings.
     */
    public int getStringsCount() {
      return strings_.size();
    }
    /**
     * <code>repeated string strings = 10;</code>
     * @param index The index of the element to return.
     * @return The strings at the given index.
     */
    public java.lang.String getStrings(int index) {
      return strings_.get(index);
    }
    /**
     * <code>repeated string strings = 10;</code>
     * @param index The index of the value to return.
     * @return The bytes of the strings at the given index.
     */
    public com.google.protobuf.ByteString
        getStringsBytes(int index) {
      return strings_.getByteString(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetIntDoubleMap(),
          IntDoubleMapDefaultEntryHolder.defaultEntry,
          1);
      com.google.protobuf.GeneratedMessageV3
        .serializeIntegerMapTo(
          output,
          internalGetIntIntMap(),
          IntIntMapDefaultEntryHolder.defaultEntry,
          2);
      if (getIntsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(intsMemoizedSerializedSize);
      }
      for (int i = 0; i < ints_.size(); i++) {
        output.writeInt32NoTag(ints_.getInt(i));
      }
      if (getLongsList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(longsMemoizedSerializedSize);
      }
      for (int i = 0; i < longs_.size(); i++) {
        output.writeInt64NoTag(longs_.getLong(i));
      }
      if (getDoublesList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(doublesMemoizedSerializedSize);
      }
      for (int i = 0; i < doubles_.size(); i++) {
        output.writeDoubleNoTag(doubles_.getDouble(i));
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetStringStringMap(),
          StringStringMapDefaultEntryHolder.defaultEntry,
          6);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetStringDoubleMap(),
          StringDoubleMapDefaultEntryHolder.defaultEntry,
          7);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetStringIntMap(),
          StringIntMapDefaultEntryHolder.defaultEntry,
          8);
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetStringLongMap(),
          StringLongMapDefaultEntryHolder.defaultEntry,
          9);
      for (int i = 0; i < strings_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 10, strings_.getRaw(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Double> entry
           : internalGetIntDoubleMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Double>
        intDoubleMap__ = IntDoubleMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, intDoubleMap__);
      }
      for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> entry
           : internalGetIntIntMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
        intIntMap__ = IntIntMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, intIntMap__);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ints_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(ints_.getInt(i));
        }
        size += dataSize;
        if (!getIntsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        intsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < longs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(longs_.getLong(i));
        }
        size += dataSize;
        if (!getLongsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        longsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getDoublesList().size();
        size += dataSize;
        if (!getDoublesList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        doublesMemoizedSerializedSize = dataSize;
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetStringStringMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        stringStringMap__ = StringStringMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, stringStringMap__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
           : internalGetStringDoubleMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
        stringDoubleMap__ = StringDoubleMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(7, stringDoubleMap__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
           : internalGetStringIntMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
        stringIntMap__ = StringIntMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(8, stringIntMap__);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Long> entry
           : internalGetStringLongMap().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
        stringLongMap__ = StringLongMapDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(9, stringLongMap__);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < strings_.size(); i++) {
          dataSize += computeStringSizeNoTag(strings_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getStringsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket)) {
        return super.equals(obj);
      }
      com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket other = (com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket) obj;

      if (!internalGetIntDoubleMap().equals(
          other.internalGetIntDoubleMap())) return false;
      if (!internalGetIntIntMap().equals(
          other.internalGetIntIntMap())) return false;
      if (!getIntsList()
          .equals(other.getIntsList())) return false;
      if (!getLongsList()
          .equals(other.getLongsList())) return false;
      if (!getDoublesList()
          .equals(other.getDoublesList())) return false;
      if (!internalGetStringStringMap().equals(
          other.internalGetStringStringMap())) return false;
      if (!internalGetStringDoubleMap().equals(
          other.internalGetStringDoubleMap())) return false;
      if (!internalGetStringIntMap().equals(
          other.internalGetStringIntMap())) return false;
      if (!internalGetStringLongMap().equals(
          other.internalGetStringLongMap())) return false;
      if (!getStringsList()
          .equals(other.getStringsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetIntDoubleMap().getMap().isEmpty()) {
        hash = (37 * hash) + INTDOUBLEMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetIntDoubleMap().hashCode();
      }
      if (!internalGetIntIntMap().getMap().isEmpty()) {
        hash = (37 * hash) + INTINTMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetIntIntMap().hashCode();
      }
      if (getIntsCount() > 0) {
        hash = (37 * hash) + INTS_FIELD_NUMBER;
        hash = (53 * hash) + getIntsList().hashCode();
      }
      if (getLongsCount() > 0) {
        hash = (37 * hash) + LONGS_FIELD_NUMBER;
        hash = (53 * hash) + getLongsList().hashCode();
      }
      if (getDoublesCount() > 0) {
        hash = (37 * hash) + DOUBLES_FIELD_NUMBER;
        hash = (53 * hash) + getDoublesList().hashCode();
      }
      if (!internalGetStringStringMap().getMap().isEmpty()) {
        hash = (37 * hash) + STRINGSTRINGMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetStringStringMap().hashCode();
      }
      if (!internalGetStringDoubleMap().getMap().isEmpty()) {
        hash = (37 * hash) + STRINGDOUBLEMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetStringDoubleMap().hashCode();
      }
      if (!internalGetStringIntMap().getMap().isEmpty()) {
        hash = (37 * hash) + STRINGINTMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetStringIntMap().hashCode();
      }
      if (!internalGetStringLongMap().getMap().isEmpty()) {
        hash = (37 * hash) + STRINGLONGMAP_FIELD_NUMBER;
        hash = (53 * hash) + internalGetStringLongMap().hashCode();
      }
      if (getStringsCount() > 0) {
        hash = (37 * hash) + STRINGS_FIELD_NUMBER;
        hash = (53 * hash) + getStringsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DataPacket}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DataPacket)
        com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacketOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetIntDoubleMap();
          case 2:
            return internalGetIntIntMap();
          case 6:
            return internalGetStringStringMap();
          case 7:
            return internalGetStringDoubleMap();
          case 8:
            return internalGetStringIntMap();
          case 9:
            return internalGetStringLongMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableIntDoubleMap();
          case 2:
            return internalGetMutableIntIntMap();
          case 6:
            return internalGetMutableStringStringMap();
          case 7:
            return internalGetMutableStringDoubleMap();
          case 8:
            return internalGetMutableStringIntMap();
          case 9:
            return internalGetMutableStringLongMap();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket.class, com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket.Builder.class);
      }

      // Construct using com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        internalGetMutableIntDoubleMap().clear();
        internalGetMutableIntIntMap().clear();
        ints_ = emptyIntList();
        longs_ = emptyLongList();
        doubles_ = emptyDoubleList();
        internalGetMutableStringStringMap().clear();
        internalGetMutableStringDoubleMap().clear();
        internalGetMutableStringIntMap().clear();
        internalGetMutableStringLongMap().clear();
        strings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.vv.personal.twm.artifactory.generated.data.DataPacketProto.internal_static_DataPacket_descriptor;
      }

      @java.lang.Override
      public com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket getDefaultInstanceForType() {
        return com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket.getDefaultInstance();
      }

      @java.lang.Override
      public com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket build() {
        com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket buildPartial() {
        com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket result = new com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket result) {
        if (((bitField0_ & 0x00000004) != 0)) {
          ints_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.ints_ = ints_;
        if (((bitField0_ & 0x00000008) != 0)) {
          longs_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.longs_ = longs_;
        if (((bitField0_ & 0x00000010) != 0)) {
          doubles_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.doubles_ = doubles_;
        if (((bitField0_ & 0x00000200) != 0)) {
          strings_ = strings_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.strings_ = strings_;
      }

      private void buildPartial0(com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.intDoubleMap_ = internalGetIntDoubleMap();
          result.intDoubleMap_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.intIntMap_ = internalGetIntIntMap();
          result.intIntMap_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.stringStringMap_ = internalGetStringStringMap();
          result.stringStringMap_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.stringDoubleMap_ = internalGetStringDoubleMap();
          result.stringDoubleMap_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.stringIntMap_ = internalGetStringIntMap();
          result.stringIntMap_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.stringLongMap_ = internalGetStringLongMap();
          result.stringLongMap_.makeImmutable();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket) {
          return mergeFrom((com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket other) {
        if (other == com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket.getDefaultInstance()) return this;
        internalGetMutableIntDoubleMap().mergeFrom(
            other.internalGetIntDoubleMap());
        bitField0_ |= 0x00000001;
        internalGetMutableIntIntMap().mergeFrom(
            other.internalGetIntIntMap());
        bitField0_ |= 0x00000002;
        if (!other.ints_.isEmpty()) {
          if (ints_.isEmpty()) {
            ints_ = other.ints_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureIntsIsMutable();
            ints_.addAll(other.ints_);
          }
          onChanged();
        }
        if (!other.longs_.isEmpty()) {
          if (longs_.isEmpty()) {
            longs_ = other.longs_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureLongsIsMutable();
            longs_.addAll(other.longs_);
          }
          onChanged();
        }
        if (!other.doubles_.isEmpty()) {
          if (doubles_.isEmpty()) {
            doubles_ = other.doubles_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureDoublesIsMutable();
            doubles_.addAll(other.doubles_);
          }
          onChanged();
        }
        internalGetMutableStringStringMap().mergeFrom(
            other.internalGetStringStringMap());
        bitField0_ |= 0x00000020;
        internalGetMutableStringDoubleMap().mergeFrom(
            other.internalGetStringDoubleMap());
        bitField0_ |= 0x00000040;
        internalGetMutableStringIntMap().mergeFrom(
            other.internalGetStringIntMap());
        bitField0_ |= 0x00000080;
        internalGetMutableStringLongMap().mergeFrom(
            other.internalGetStringLongMap());
        bitField0_ |= 0x00000100;
        if (!other.strings_.isEmpty()) {
          if (strings_.isEmpty()) {
            strings_ = other.strings_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureStringsIsMutable();
            strings_.addAll(other.strings_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Double>
                intDoubleMap__ = input.readMessage(
                    IntDoubleMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableIntDoubleMap().getMutableMap().put(
                    intDoubleMap__.getKey(), intDoubleMap__.getValue());
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.google.protobuf.MapEntry<java.lang.Integer, java.lang.Integer>
                intIntMap__ = input.readMessage(
                    IntIntMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableIntIntMap().getMutableMap().put(
                    intIntMap__.getKey(), intIntMap__.getValue());
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                int v = input.readInt32();
                ensureIntsIsMutable();
                ints_.addInt(v);
                break;
              } // case 24
              case 26: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureIntsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  ints_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 26
              case 32: {
                long v = input.readInt64();
                ensureLongsIsMutable();
                longs_.addLong(v);
                break;
              } // case 32
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureLongsIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  longs_.addLong(input.readInt64());
                }
                input.popLimit(limit);
                break;
              } // case 34
              case 41: {
                double v = input.readDouble();
                ensureDoublesIsMutable();
                doubles_.addDouble(v);
                break;
              } // case 41
              case 42: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureDoublesIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  doubles_.addDouble(input.readDouble());
                }
                input.popLimit(limit);
                break;
              } // case 42
              case 50: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
                stringStringMap__ = input.readMessage(
                    StringStringMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableStringStringMap().getMutableMap().put(
                    stringStringMap__.getKey(), stringStringMap__.getValue());
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.Double>
                stringDoubleMap__ = input.readMessage(
                    StringDoubleMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableStringDoubleMap().getMutableMap().put(
                    stringDoubleMap__.getKey(), stringDoubleMap__.getValue());
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
                stringIntMap__ = input.readMessage(
                    StringIntMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableStringIntMap().getMutableMap().put(
                    stringIntMap__.getKey(), stringIntMap__.getValue());
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 74: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.Long>
                stringLongMap__ = input.readMessage(
                    StringLongMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableStringLongMap().getMutableMap().put(
                    stringLongMap__.getKey(), stringLongMap__.getValue());
                bitField0_ |= 0x00000100;
                break;
              } // case 74
              case 82: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureStringsIsMutable();
                strings_.add(s);
                break;
              } // case 82
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.Integer, java.lang.Double> intDoubleMap_;
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.Double>
          internalGetIntDoubleMap() {
        if (intDoubleMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              IntDoubleMapDefaultEntryHolder.defaultEntry);
        }
        return intDoubleMap_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.Double>
          internalGetMutableIntDoubleMap() {
        if (intDoubleMap_ == null) {
          intDoubleMap_ = com.google.protobuf.MapField.newMapField(
              IntDoubleMapDefaultEntryHolder.defaultEntry);
        }
        if (!intDoubleMap_.isMutable()) {
          intDoubleMap_ = intDoubleMap_.copy();
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return intDoubleMap_;
      }
      public int getIntDoubleMapCount() {
        return internalGetIntDoubleMap().getMap().size();
      }
      /**
       * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
       */
      @java.lang.Override
      public boolean containsIntDoubleMap(
          int key) {
        
        return internalGetIntDoubleMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getIntDoubleMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double> getIntDoubleMap() {
        return getIntDoubleMapMap();
      }
      /**
       * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Double> getIntDoubleMapMap() {
        return internalGetIntDoubleMap().getMap();
      }
      /**
       * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
       */
      @java.lang.Override
      public double getIntDoubleMapOrDefault(
          int key,
          double defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            internalGetIntDoubleMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
       */
      @java.lang.Override
      public double getIntDoubleMapOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Double> map =
            internalGetIntDoubleMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearIntDoubleMap() {
        bitField0_ = (bitField0_ & ~0x00000001);
        internalGetMutableIntDoubleMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
       */
      public Builder removeIntDoubleMap(
          int key) {
        
        internalGetMutableIntDoubleMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Double>
          getMutableIntDoubleMap() {
        bitField0_ |= 0x00000001;
        return internalGetMutableIntDoubleMap().getMutableMap();
      }
      /**
       * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
       */
      public Builder putIntDoubleMap(
          int key,
          double value) {
        
        
        internalGetMutableIntDoubleMap().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>map&lt;int32, double&gt; intDoubleMap = 1;</code>
       */
      public Builder putAllIntDoubleMap(
          java.util.Map<java.lang.Integer, java.lang.Double> values) {
        internalGetMutableIntDoubleMap().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000001;
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.Integer, java.lang.Integer> intIntMap_;
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
          internalGetIntIntMap() {
        if (intIntMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              IntIntMapDefaultEntryHolder.defaultEntry);
        }
        return intIntMap_;
      }
      private com.google.protobuf.MapField<java.lang.Integer, java.lang.Integer>
          internalGetMutableIntIntMap() {
        if (intIntMap_ == null) {
          intIntMap_ = com.google.protobuf.MapField.newMapField(
              IntIntMapDefaultEntryHolder.defaultEntry);
        }
        if (!intIntMap_.isMutable()) {
          intIntMap_ = intIntMap_.copy();
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return intIntMap_;
      }
      public int getIntIntMapCount() {
        return internalGetIntIntMap().getMap().size();
      }
      /**
       * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
       */
      @java.lang.Override
      public boolean containsIntIntMap(
          int key) {
        
        return internalGetIntIntMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getIntIntMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer> getIntIntMap() {
        return getIntIntMapMap();
      }
      /**
       * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.Integer, java.lang.Integer> getIntIntMapMap() {
        return internalGetIntIntMap().getMap();
      }
      /**
       * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
       */
      @java.lang.Override
      public int getIntIntMapOrDefault(
          int key,
          int defaultValue) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            internalGetIntIntMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
       */
      @java.lang.Override
      public int getIntIntMapOrThrow(
          int key) {
        
        java.util.Map<java.lang.Integer, java.lang.Integer> map =
            internalGetIntIntMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearIntIntMap() {
        bitField0_ = (bitField0_ & ~0x00000002);
        internalGetMutableIntIntMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
       */
      public Builder removeIntIntMap(
          int key) {
        
        internalGetMutableIntIntMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.Integer, java.lang.Integer>
          getMutableIntIntMap() {
        bitField0_ |= 0x00000002;
        return internalGetMutableIntIntMap().getMutableMap();
      }
      /**
       * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
       */
      public Builder putIntIntMap(
          int key,
          int value) {
        
        
        internalGetMutableIntIntMap().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>map&lt;int32, int32&gt; intIntMap = 2;</code>
       */
      public Builder putAllIntIntMap(
          java.util.Map<java.lang.Integer, java.lang.Integer> values) {
        internalGetMutableIntIntMap().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000002;
        return this;
      }

      private com.google.protobuf.Internal.IntList ints_ = emptyIntList();
      private void ensureIntsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          ints_ = mutableCopy(ints_);
          bitField0_ |= 0x00000004;
        }
      }
      /**
       * <code>repeated int32 ints = 3;</code>
       * @return A list containing the ints.
       */
      public java.util.List<java.lang.Integer>
          getIntsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(ints_) : ints_;
      }
      /**
       * <code>repeated int32 ints = 3;</code>
       * @return The count of ints.
       */
      public int getIntsCount() {
        return ints_.size();
      }
      /**
       * <code>repeated int32 ints = 3;</code>
       * @param index The index of the element to return.
       * @return The ints at the given index.
       */
      public int getInts(int index) {
        return ints_.getInt(index);
      }
      /**
       * <code>repeated int32 ints = 3;</code>
       * @param index The index to set the value at.
       * @param value The ints to set.
       * @return This builder for chaining.
       */
      public Builder setInts(
          int index, int value) {
        
        ensureIntsIsMutable();
        ints_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ints = 3;</code>
       * @param value The ints to add.
       * @return This builder for chaining.
       */
      public Builder addInts(int value) {
        
        ensureIntsIsMutable();
        ints_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ints = 3;</code>
       * @param values The ints to add.
       * @return This builder for chaining.
       */
      public Builder addAllInts(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureIntsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ints_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 ints = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInts() {
        ints_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList longs_ = emptyLongList();
      private void ensureLongsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          longs_ = mutableCopy(longs_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <code>repeated int64 longs = 4;</code>
       * @return A list containing the longs.
       */
      public java.util.List<java.lang.Long>
          getLongsList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(longs_) : longs_;
      }
      /**
       * <code>repeated int64 longs = 4;</code>
       * @return The count of longs.
       */
      public int getLongsCount() {
        return longs_.size();
      }
      /**
       * <code>repeated int64 longs = 4;</code>
       * @param index The index of the element to return.
       * @return The longs at the given index.
       */
      public long getLongs(int index) {
        return longs_.getLong(index);
      }
      /**
       * <code>repeated int64 longs = 4;</code>
       * @param index The index to set the value at.
       * @param value The longs to set.
       * @return This builder for chaining.
       */
      public Builder setLongs(
          int index, long value) {
        
        ensureLongsIsMutable();
        longs_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 longs = 4;</code>
       * @param value The longs to add.
       * @return This builder for chaining.
       */
      public Builder addLongs(long value) {
        
        ensureLongsIsMutable();
        longs_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 longs = 4;</code>
       * @param values The longs to add.
       * @return This builder for chaining.
       */
      public Builder addAllLongs(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureLongsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, longs_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int64 longs = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLongs() {
        longs_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.DoubleList doubles_ = emptyDoubleList();
      private void ensureDoublesIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          doubles_ = mutableCopy(doubles_);
          bitField0_ |= 0x00000010;
        }
      }
      /**
       * <code>repeated double doubles = 5;</code>
       * @return A list containing the doubles.
       */
      public java.util.List<java.lang.Double>
          getDoublesList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(doubles_) : doubles_;
      }
      /**
       * <code>repeated double doubles = 5;</code>
       * @return The count of doubles.
       */
      public int getDoublesCount() {
        return doubles_.size();
      }
      /**
       * <code>repeated double doubles = 5;</code>
       * @param index The index of the element to return.
       * @return The doubles at the given index.
       */
      public double getDoubles(int index) {
        return doubles_.getDouble(index);
      }
      /**
       * <code>repeated double doubles = 5;</code>
       * @param index The index to set the value at.
       * @param value The doubles to set.
       * @return This builder for chaining.
       */
      public Builder setDoubles(
          int index, double value) {
        
        ensureDoublesIsMutable();
        doubles_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubles = 5;</code>
       * @param value The doubles to add.
       * @return This builder for chaining.
       */
      public Builder addDoubles(double value) {
        
        ensureDoublesIsMutable();
        doubles_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubles = 5;</code>
       * @param values The doubles to add.
       * @return This builder for chaining.
       */
      public Builder addAllDoubles(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureDoublesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, doubles_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated double doubles = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDoubles() {
        doubles_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> stringStringMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetStringStringMap() {
        if (stringStringMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StringStringMapDefaultEntryHolder.defaultEntry);
        }
        return stringStringMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetMutableStringStringMap() {
        if (stringStringMap_ == null) {
          stringStringMap_ = com.google.protobuf.MapField.newMapField(
              StringStringMapDefaultEntryHolder.defaultEntry);
        }
        if (!stringStringMap_.isMutable()) {
          stringStringMap_ = stringStringMap_.copy();
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return stringStringMap_;
      }
      public int getStringStringMapCount() {
        return internalGetStringStringMap().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
       */
      @java.lang.Override
      public boolean containsStringStringMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetStringStringMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStringStringMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getStringStringMap() {
        return getStringStringMapMap();
      }
      /**
       * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getStringStringMapMap() {
        return internalGetStringStringMap().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
       */
      @java.lang.Override
      public /* nullable */
java.lang.String getStringStringMapOrDefault(
          java.lang.String key,
          /* nullable */
java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetStringStringMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
       */
      @java.lang.Override
      public java.lang.String getStringStringMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetStringStringMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearStringStringMap() {
        bitField0_ = (bitField0_ & ~0x00000020);
        internalGetMutableStringStringMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
       */
      public Builder removeStringStringMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableStringStringMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
          getMutableStringStringMap() {
        bitField0_ |= 0x00000020;
        return internalGetMutableStringStringMap().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
       */
      public Builder putStringStringMap(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableStringStringMap().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; stringStringMap = 6;</code>
       */
      public Builder putAllStringStringMap(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableStringStringMap().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000020;
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Double> stringDoubleMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
          internalGetStringDoubleMap() {
        if (stringDoubleMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StringDoubleMapDefaultEntryHolder.defaultEntry);
        }
        return stringDoubleMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Double>
          internalGetMutableStringDoubleMap() {
        if (stringDoubleMap_ == null) {
          stringDoubleMap_ = com.google.protobuf.MapField.newMapField(
              StringDoubleMapDefaultEntryHolder.defaultEntry);
        }
        if (!stringDoubleMap_.isMutable()) {
          stringDoubleMap_ = stringDoubleMap_.copy();
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return stringDoubleMap_;
      }
      public int getStringDoubleMapCount() {
        return internalGetStringDoubleMap().getMap().size();
      }
      /**
       * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
       */
      @java.lang.Override
      public boolean containsStringDoubleMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetStringDoubleMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStringDoubleMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Double> getStringDoubleMap() {
        return getStringDoubleMapMap();
      }
      /**
       * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Double> getStringDoubleMapMap() {
        return internalGetStringDoubleMap().getMap();
      }
      /**
       * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
       */
      @java.lang.Override
      public double getStringDoubleMapOrDefault(
          java.lang.String key,
          double defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Double> map =
            internalGetStringDoubleMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
       */
      @java.lang.Override
      public double getStringDoubleMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Double> map =
            internalGetStringDoubleMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearStringDoubleMap() {
        bitField0_ = (bitField0_ & ~0x00000040);
        internalGetMutableStringDoubleMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
       */
      public Builder removeStringDoubleMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableStringDoubleMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Double>
          getMutableStringDoubleMap() {
        bitField0_ |= 0x00000040;
        return internalGetMutableStringDoubleMap().getMutableMap();
      }
      /**
       * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
       */
      public Builder putStringDoubleMap(
          java.lang.String key,
          double value) {
        if (key == null) { throw new NullPointerException("map key"); }
        
        internalGetMutableStringDoubleMap().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>map&lt;string, double&gt; stringDoubleMap = 7;</code>
       */
      public Builder putAllStringDoubleMap(
          java.util.Map<java.lang.String, java.lang.Double> values) {
        internalGetMutableStringDoubleMap().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000040;
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Integer> stringIntMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
          internalGetStringIntMap() {
        if (stringIntMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StringIntMapDefaultEntryHolder.defaultEntry);
        }
        return stringIntMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
          internalGetMutableStringIntMap() {
        if (stringIntMap_ == null) {
          stringIntMap_ = com.google.protobuf.MapField.newMapField(
              StringIntMapDefaultEntryHolder.defaultEntry);
        }
        if (!stringIntMap_.isMutable()) {
          stringIntMap_ = stringIntMap_.copy();
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return stringIntMap_;
      }
      public int getStringIntMapCount() {
        return internalGetStringIntMap().getMap().size();
      }
      /**
       * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
       */
      @java.lang.Override
      public boolean containsStringIntMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetStringIntMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStringIntMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer> getStringIntMap() {
        return getStringIntMapMap();
      }
      /**
       * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Integer> getStringIntMapMap() {
        return internalGetStringIntMap().getMap();
      }
      /**
       * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
       */
      @java.lang.Override
      public int getStringIntMapOrDefault(
          java.lang.String key,
          int defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetStringIntMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
       */
      @java.lang.Override
      public int getStringIntMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Integer> map =
            internalGetStringIntMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearStringIntMap() {
        bitField0_ = (bitField0_ & ~0x00000080);
        internalGetMutableStringIntMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
       */
      public Builder removeStringIntMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableStringIntMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Integer>
          getMutableStringIntMap() {
        bitField0_ |= 0x00000080;
        return internalGetMutableStringIntMap().getMutableMap();
      }
      /**
       * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
       */
      public Builder putStringIntMap(
          java.lang.String key,
          int value) {
        if (key == null) { throw new NullPointerException("map key"); }
        
        internalGetMutableStringIntMap().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>map&lt;string, int32&gt; stringIntMap = 8;</code>
       */
      public Builder putAllStringIntMap(
          java.util.Map<java.lang.String, java.lang.Integer> values) {
        internalGetMutableStringIntMap().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000080;
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.Long> stringLongMap_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
          internalGetStringLongMap() {
        if (stringLongMap_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              StringLongMapDefaultEntryHolder.defaultEntry);
        }
        return stringLongMap_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.Long>
          internalGetMutableStringLongMap() {
        if (stringLongMap_ == null) {
          stringLongMap_ = com.google.protobuf.MapField.newMapField(
              StringLongMapDefaultEntryHolder.defaultEntry);
        }
        if (!stringLongMap_.isMutable()) {
          stringLongMap_ = stringLongMap_.copy();
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return stringLongMap_;
      }
      public int getStringLongMapCount() {
        return internalGetStringLongMap().getMap().size();
      }
      /**
       * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
       */
      @java.lang.Override
      public boolean containsStringLongMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetStringLongMap().getMap().containsKey(key);
      }
      /**
       * Use {@link #getStringLongMapMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long> getStringLongMap() {
        return getStringLongMapMap();
      }
      /**
       * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.Long> getStringLongMapMap() {
        return internalGetStringLongMap().getMap();
      }
      /**
       * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
       */
      @java.lang.Override
      public long getStringLongMapOrDefault(
          java.lang.String key,
          long defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetStringLongMap().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
       */
      @java.lang.Override
      public long getStringLongMapOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.Long> map =
            internalGetStringLongMap().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearStringLongMap() {
        bitField0_ = (bitField0_ & ~0x00000100);
        internalGetMutableStringLongMap().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
       */
      public Builder removeStringLongMap(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableStringLongMap().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Long>
          getMutableStringLongMap() {
        bitField0_ |= 0x00000100;
        return internalGetMutableStringLongMap().getMutableMap();
      }
      /**
       * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
       */
      public Builder putStringLongMap(
          java.lang.String key,
          long value) {
        if (key == null) { throw new NullPointerException("map key"); }
        
        internalGetMutableStringLongMap().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>map&lt;string, int64&gt; stringLongMap = 9;</code>
       */
      public Builder putAllStringLongMap(
          java.util.Map<java.lang.String, java.lang.Long> values) {
        internalGetMutableStringLongMap().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000100;
        return this;
      }

      private com.google.protobuf.LazyStringList strings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureStringsIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          strings_ = new com.google.protobuf.LazyStringArrayList(strings_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @return A list containing the strings.
       */
      public com.google.protobuf.ProtocolStringList
          getStringsList() {
        return strings_.getUnmodifiableView();
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @return The count of strings.
       */
      public int getStringsCount() {
        return strings_.size();
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @param index The index of the element to return.
       * @return The strings at the given index.
       */
      public java.lang.String getStrings(int index) {
        return strings_.get(index);
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @param index The index of the value to return.
       * @return The bytes of the strings at the given index.
       */
      public com.google.protobuf.ByteString
          getStringsBytes(int index) {
        return strings_.getByteString(index);
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @param index The index to set the value at.
       * @param value The strings to set.
       * @return This builder for chaining.
       */
      public Builder setStrings(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringsIsMutable();
        strings_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @param value The strings to add.
       * @return This builder for chaining.
       */
      public Builder addStrings(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStringsIsMutable();
        strings_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @param values The strings to add.
       * @return This builder for chaining.
       */
      public Builder addAllStrings(
          java.lang.Iterable<java.lang.String> values) {
        ensureStringsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, strings_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearStrings() {
        strings_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }
      /**
       * <code>repeated string strings = 10;</code>
       * @param value The bytes of the strings to add.
       * @return This builder for chaining.
       */
      public Builder addStringsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureStringsIsMutable();
        strings_.add(value);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DataPacket)
    }

    // @@protoc_insertion_point(class_scope:DataPacket)
    private static final com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket();
    }

    public static com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DataPacket>
        PARSER = new com.google.protobuf.AbstractParser<DataPacket>() {
      @java.lang.Override
      public DataPacket parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<DataPacket> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DataPacket> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.vv.personal.twm.artifactory.generated.data.DataPacketProto.DataPacket getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DataPacket_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataPacket_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DataPacket_IntDoubleMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataPacket_IntDoubleMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DataPacket_IntIntMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataPacket_IntIntMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DataPacket_StringStringMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataPacket_StringStringMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DataPacket_StringDoubleMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataPacket_StringDoubleMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DataPacket_StringIntMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataPacket_StringIntMapEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_DataPacket_StringLongMapEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_DataPacket_StringLongMapEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020DataPacket.proto\"\323\005\n\nDataPacket\0223\n\014int" +
      "DoubleMap\030\001 \003(\0132\035.DataPacket.IntDoubleMa" +
      "pEntry\022-\n\tintIntMap\030\002 \003(\0132\032.DataPacket.I" +
      "ntIntMapEntry\022\014\n\004ints\030\003 \003(\005\022\r\n\005longs\030\004 \003" +
      "(\003\022\017\n\007doubles\030\005 \003(\001\0229\n\017stringStringMap\030\006" +
      " \003(\0132 .DataPacket.StringStringMapEntry\0229" +
      "\n\017stringDoubleMap\030\007 \003(\0132 .DataPacket.Str" +
      "ingDoubleMapEntry\0223\n\014stringIntMap\030\010 \003(\0132" +
      "\035.DataPacket.StringIntMapEntry\0225\n\rstring" +
      "LongMap\030\t \003(\0132\036.DataPacket.StringLongMap" +
      "Entry\022\017\n\007strings\030\n \003(\t\0323\n\021IntDoubleMapEn" +
      "try\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\001:\0028\001\0320\n\016I" +
      "ntIntMapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(" +
      "\005:\0028\001\0326\n\024StringStringMapEntry\022\013\n\003key\030\001 \001" +
      "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0326\n\024StringDoubleMap" +
      "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\0323\n" +
      "\021StringIntMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value" +
      "\030\002 \001(\005:\0028\001\0324\n\022StringLongMapEntry\022\013\n\003key\030" +
      "\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001BA\n.com.vv.perso" +
      "nal.twm.artifactory.generated.dataB\017Data" +
      "PacketProtob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_DataPacket_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_DataPacket_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataPacket_descriptor,
        new java.lang.String[] { "IntDoubleMap", "IntIntMap", "Ints", "Longs", "Doubles", "StringStringMap", "StringDoubleMap", "StringIntMap", "StringLongMap", "Strings", });
    internal_static_DataPacket_IntDoubleMapEntry_descriptor =
      internal_static_DataPacket_descriptor.getNestedTypes().get(0);
    internal_static_DataPacket_IntDoubleMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataPacket_IntDoubleMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_DataPacket_IntIntMapEntry_descriptor =
      internal_static_DataPacket_descriptor.getNestedTypes().get(1);
    internal_static_DataPacket_IntIntMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataPacket_IntIntMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_DataPacket_StringStringMapEntry_descriptor =
      internal_static_DataPacket_descriptor.getNestedTypes().get(2);
    internal_static_DataPacket_StringStringMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataPacket_StringStringMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_DataPacket_StringDoubleMapEntry_descriptor =
      internal_static_DataPacket_descriptor.getNestedTypes().get(3);
    internal_static_DataPacket_StringDoubleMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataPacket_StringDoubleMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_DataPacket_StringIntMapEntry_descriptor =
      internal_static_DataPacket_descriptor.getNestedTypes().get(4);
    internal_static_DataPacket_StringIntMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataPacket_StringIntMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_DataPacket_StringLongMapEntry_descriptor =
      internal_static_DataPacket_descriptor.getNestedTypes().get(5);
    internal_static_DataPacket_StringLongMapEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_DataPacket_StringLongMapEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
